"use strict";
/******************************************************************************

BLACKJACK FRONTEND v0.0.0-alpha.rc.7
AUTOGENERATED TRANSACTIONS.TS FILE

CREATED:        12 March 2023
AUTHOR:         YAESHA256
AFFILIATIONS:   AART
                                                                               
******************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.send_tx = void 0;
const consts = __importStar(require("./constants"));
const h = __importStar(require("./helpers"));
const MAX_ATTEMPTS = 4;
function send_tx(contractCodeHash, msg, sent = [], gas = 50000, attempt_no = 0, exit_on_fail = true, cli = 0) {
    return __awaiter(this, void 0, void 0, function* () {
        let tx_resp = yield consts.SECRETCLI[cli].tx.compute.executeContract({
            sender: consts.WALLET.address,
            contract_address: consts.CONTRACT_ADDRESS,
            code_hash: contractCodeHash,
            msg: msg,
            sent_funds: sent,
        }, {
            gasLimit: gas,
        }).catch(e => {
            if (exit_on_fail) {
                h.exit(1, "send tx failed: ", e);
            }
            else {
                return `send tx failed: ${e}`;
            }
        });
        // gas manangement
        if (tx_resp.code != 0) {
            if (attempt_no > MAX_ATTEMPTS) {
                if (exit_on_fail) {
                    h.exit(1, "too many failed attempts", tx_resp);
                }
                else {
                    return `too many failed attempts ${tx_resp.rawLog}`;
                }
            }
            let gas_used = tx_resp.gasUsed;
            if (gas_used > Number(consts.GAS_LIMIT)) {
                let message = `cannot do tx: ${tx_resp.rawLog}`;
                if (exit_on_fail) {
                    h.exit(0, message);
                }
                else {
                    return message;
                }
            }
            if (attempt_no == MAX_ATTEMPTS) {
                // final attempt
                return yield send_tx(contractCodeHash, msg, sent, Number(consts.GAS_LIMIT), attempt_no + 1, exit_on_fail);
            }
            return yield send_tx(contractCodeHash, msg, sent, gas_used, attempt_no + 1, exit_on_fail);
        }
        return tx_resp;
    });
}
exports.send_tx = send_tx;
