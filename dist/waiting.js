"use strict";
/******************************************************************************

BLACKJACK FRONTEND v0.0.0-alpha.rc.7
AUTOGENERATED WAITING.TS FILE

CREATED:        12 March 2023
AUTHOR:         YAESHA256
AFFILIATIONS:   AART
                                                                               
******************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wait_start = void 0;
const consts = __importStar(require("./constants"));
const query = __importStar(require("./queries"));
const h = __importStar(require("./helpers"));
const b = __importStar(require("neo-blessed"));
const fs = __importStar(require("fs"));
const tx = __importStar(require("./transactions"));
/******************************************************************************
wait start
******************************************************************************/
function wait_start(contractCodeHash) {
    return __awaiter(this, void 0, void 0, function* () {
        consts.BOX.setContent('');
        let left = false;
        let header = b.text({
            parent: consts.BOX,
            top: 0,
            left: 1,
            tags: true,
            content: ' waiting... (\'l\' to leave game)'
        });
        let message = b.text({
            parent: consts.BOX,
            top: 3,
            left: 1,
            tags: true,
            content: ''
        });
        let alloc_result = yield query.allocation(contractCodeHash);
        if (!alloc_result[1]) {
            return !left;
        }
        let alloc = alloc_result[0];
        let pool_id = alloc.pool_id;
        let dialog = b.box({
            parent: consts.SCREEN,
            top: 'center',
            left: 'center',
            width: '40%',
            height: '40%',
            align: 'center',
            content: 'leave game? y/N',
            tags: true,
            padding: {
                left: 2,
                right: 2,
                top: 1,
                bottom: 1
            },
            border: {
                type: 'line'
            },
            style: {
                border: {
                    fg: '#f0f0f0'
                },
            },
            keys: true,
            vi: true,
            hidden: true,
        });
        consts.BOX.key('l', function () {
            return __awaiter(this, void 0, void 0, function* () {
                dialog.hidden = !dialog.hidden;
                if (!dialog.hidden) {
                    let yesno = yield h.get_input(dialog);
                    if (yesno == 'y' || yesno == 'Y') {
                        dialog.content = 'leaving game...';
                        consts.SCREEN.render();
                        let leave_tx = yield tx.send_tx(contractCodeHash, { leave_game: { pool_id: pool_id } }, [], 55000, 0, false);
                        if (typeof leave_tx === "string") {
                            yield h.show_alert(leave_tx);
                            return;
                        }
                        let receipt_dir = "./receipts";
                        if (!fs.existsSync(receipt_dir)) {
                            fs.mkdirSync(receipt_dir);
                        }
                        let date_str = new Date().toLocaleString('en-GB');
                        date_str = date_str.replace(/\//g, '-');
                        date_str = date_str.replace(/ /g, '-');
                        date_str = date_str.replace(/,/g, '-');
                        date_str = date_str.replace(/:/g, '-');
                        let file_path = receipt_dir + "/refund-" + date_str;
                        let refund_data = JSON.stringify(leave_tx, null, 4);
                        fs.writeFile(file_path, refund_data, function (err) {
                            return __awaiter(this, void 0, void 0, function* () {
                                if (err) {
                                    yield h.exit(1, "failed to save receipt: ", err);
                                }
                            });
                        });
                        dialog.content = "receipt saved in file:\n" + file_path;
                        consts.SCREEN.render();
                        left = true;
                        yield h.sleep(5);
                    }
                    dialog.hidden = true;
                }
                consts.SCREEN.render();
            });
        });
        let n_more = 255;
        while (n_more !== 0 && !left) {
            let alloc_result = yield query.allocation(contractCodeHash);
            if (!alloc_result[1] && !left) {
                continue;
            }
            let alloc = alloc_result[0];
            if (consts.INFO_IN_A_QUEUE.test(alloc.instance_id)) {
                let message_str = 'you are in the queue...';
                message.content = message_str;
                pool_id = alloc.pool_id;
            }
            else {
                let gameInfo_result = yield query.game_info(contractCodeHash, alloc.instance_id, alloc.pool_id);
                if (!gameInfo_result[1]) {
                    return !left;
                }
                let gameInfo = gameInfo_result[0];
                n_more = h.capacity_by_pool_id(gameInfo.pool_id) - gameInfo.players.length;
                let message_str = 'players: ';
                for (const [idx, player] of gameInfo.players.entries()) {
                    let player_username = player.username;
                    if (idx == alloc.index) {
                        player_username = `{blue-fg}${player_username}{/}`;
                    }
                    message_str += `\n\t${player_username}`;
                }
                message.content =
                    `\n\nwaiting for ${n_more} more player` +
                        (n_more == 1 ? '\n\n' : 's\n\n') +
                        message_str;
            }
            consts.SCREEN.render();
            yield h.sleep(3);
        }
        header.destroy();
        message.destroy();
        dialog.destroy();
        consts.BOX.focus();
        consts.BOX.unkey('enter', () => { });
        consts.SCREEN.render();
        return !left;
    });
}
exports.wait_start = wait_start;
