"use strict";
/******************************************************************************

BLACKJACK FRONTEND v0.0.0-alpha.rc.7
AUTOGENERATED CONSTANTS.TS FILE

CREATED:        12 March 2023
AUTHOR:         YAESHA256
AFFILIATIONS:   AART
                                                                               
******************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.settings_menu = exports.ALERT = exports.BOX = exports.SCREEN = exports.SECRETCLI = exports.WALLET = exports.PATTERN_GAS_USED = exports.ERR_OUT_OF_GAS = exports.INFO_IN_A_QUEUE = exports.ERR_BANNED = exports.ERR_ALIAS_IS_IN_USE = exports.ERR_GAME_IS_HUMAN_ONLY = exports.ERR_GAME_IS_AI_ONLY = exports.ERR_PLAYER_ALREADY_JOINED = exports.ERR_POOL_NOT_FOUND = exports.ERR_GAME_IS_OVER = exports.ERR_ITEM_DOES_NOT_EXIST = exports.ERR_INSTANCE_IS_OFFLINE = exports.ERR_GENERIC = exports.GAS_LIMIT = exports.POOL_ID = exports.LUCKY_PHRASE = exports.AS_HUMAN = exports.INSTANCE_ID = exports.CODE_ID = exports.CONTRACT_ADDRESS = exports.BLACKJACK_VERSION = void 0;
exports.BLACKJACK_VERSION = "v0.0.0-alpha.rc.7";
exports.CONTRACT_ADDRESS = "secret1uxgy6zh4kxkzqevzf3hww3plsfcu4vm8e534y7";
exports.CODE_ID = 20271;
/******************************************************************************
DOTENV Variables
******************************************************************************/
const dotenv = __importStar(require("dotenv"));
dotenv.config({ override: true });
exports.INSTANCE_ID = process.env.INSTANCE_ID;
exports.AS_HUMAN = process.env.AS_HUMAN == 'true';
exports.LUCKY_PHRASE = process.env.LUCKY_PHRASE;
exports.POOL_ID = process.env.POOL_ID;
exports.GAS_LIMIT = process.env.GAS_LIMIT;
/******************************************************************************
REGEXES
******************************************************************************/
// common errors
exports.ERR_GENERIC = new RegExp("Generic error:");
exports.ERR_INSTANCE_IS_OFFLINE = new RegExp("Instance is offline.");
exports.ERR_ITEM_DOES_NOT_EXIST = new RegExp("Item doesn't exist");
exports.ERR_GAME_IS_OVER = new RegExp("Game is over.");
// pool errors
exports.ERR_POOL_NOT_FOUND = new RegExp("Pool not found");
// join_game errors
exports.ERR_PLAYER_ALREADY_JOINED = new RegExp("Player has already joined as");
exports.ERR_GAME_IS_AI_ONLY = new RegExp("Game is AI only");
exports.ERR_GAME_IS_HUMAN_ONLY = new RegExp("Game is human only");
exports.ERR_ALIAS_IS_IN_USE = new RegExp("Alias is already in use.");
exports.ERR_BANNED = new RegExp("Banned! \\:\\(");
// info in a queue
exports.INFO_IN_A_QUEUE = new RegExp("0{64}");
// tx errors
exports.ERR_OUT_OF_GAS = new RegExp("out of gas");
// patterns
exports.PATTERN_GAS_USED = new RegExp("gasUsed:[' ']+([0-9]+):");
/******************************************************************************
Secret
******************************************************************************/
const secretjs_1 = require("secretjs");
exports.WALLET = new secretjs_1.Wallet(process.env.MNEMONIC);
exports.SECRETCLI = [
    new secretjs_1.SecretNetworkClient({
        url: process.env.SECRET_LCD_URL_1,
        wallet: exports.WALLET,
        walletAddress: exports.WALLET.address,
        chainId: process.env.SECRET_CHAIN_ID,
    }),
    new secretjs_1.SecretNetworkClient({
        url: process.env.SECRET_LCD_URL_2,
        wallet: exports.WALLET,
        walletAddress: exports.WALLET.address,
        chainId: process.env.SECRET_CHAIN_ID,
    }),
    new secretjs_1.SecretNetworkClient({
        url: process.env.SECRET_LCD_URL_3,
        wallet: exports.WALLET,
        walletAddress: exports.WALLET.address,
        chainId: process.env.SECRET_CHAIN_ID,
    }),
];
/******************************************************************************
Terminal
******************************************************************************/
const BLESSED = __importStar(require("neo-blessed"));
exports.SCREEN = BLESSED.screen({
    smartCSR: true
});
exports.SCREEN.title = "Blackjack " + exports.BLACKJACK_VERSION;
exports.SCREEN.key(['escape', 'C-c'], function (ch, key) {
    exports.SCREEN.destroy();
    return process.exit(0);
});
exports.BOX = BLESSED.box({
    parent: exports.SCREEN,
    top: 'center',
    left: 'center',
    width: 100,
    height: '90%',
    content: '',
    tags: true,
    padding: {
        left: 4,
        right: 4,
        top: 3,
        bottom: 3
    },
    border: {
        type: 'line'
    },
    style: {
        border: {
            fg: '#f0f0f0'
        },
    },
    keys: true,
    vi: true,
    alwaysScroll: true,
    scrollable: true,
    scrollbar: {
        style: {
            bg: 'yellow'
        }
    }
});
exports.ALERT = BLESSED.box({
    parent: exports.SCREEN,
    top: 'center',
    left: 'center',
    width: '80%',
    height: '80%',
    align: 'center',
    content: '',
    tags: true,
    padding: {
        left: 2,
        right: 2,
        top: 1,
        bottom: 1
    },
    border: {
        type: 'line'
    },
    style: {
        border: {
            fg: '#f0f0f0'
        },
    },
    keys: true,
    vi: true,
    hidden: true,
});
/******************************************************************************
settings
******************************************************************************/
const helpers_1 = require("./helpers");
const queries_1 = require("./queries");
const fs = __importStar(require("fs"));
const update_dotenv_1 = __importDefault(require("update-dotenv"));
const SETTINGS = BLESSED.box({
    parent: exports.SCREEN,
    top: 'center',
    left: 'center',
    width: 90,
    height: '80%',
    align: 'center',
    content: '',
    tags: true,
    padding: {
        left: 2,
        right: 2,
        top: 1,
        bottom: 1
    },
    border: {
        type: 'line'
    },
    style: {
        border: {
            fg: '#f0f0f0'
        },
    },
    keys: true,
    vi: true,
    hidden: true,
});
function settings_data() {
    return __awaiter(this, void 0, void 0, function* () {
        let username = 'none set';
        let username_info = yield (0, queries_1.name_of_addr)(process.env.CODE_HASH);
        if (!username_info[1]) {
            if (exports.ERR_ITEM_DOES_NOT_EXIST.test(username_info[0])) {
                username = 'none set';
            }
            else {
                username = 'could not get';
                yield (0, helpers_1.show_alert)("could not get username, is the viewing key correct?", username_info[0]);
            }
        }
        else {
            username = username_info[0].username;
        }
        return [
            ['', '', 'Settings',],
            ['', '', '',],
            ['{bold}index{/}', '{bold}action{/}', '{bold}current value{/}',],
            ['', '', '',],
            ['0)', 'generate viewing key', process.env.VIEWING_KEY,],
            ['1)', 'set username', username],
            ['2)', 'toggle unicode symbols', process.env.SYMBOLIC_TERM,],
        ];
    });
}
const SETTINGS_TABLE = BLESSED.listtable({
    parent: SETTINGS,
    top: 4,
    left: 1,
    height: '70%',
    align: 'left',
    tags: true,
    data: [],
});
let SETTINGS_MESSAGE = BLESSED.text({
    parent: SETTINGS,
    top: 1,
    left: 1,
    tags: true,
    content: 'enter an index'
});
function generate_vk() {
    return __awaiter(this, void 0, void 0, function* () {
        let entropy = '';
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        const charactersLength = characters.length;
        let counter = 0;
        while (counter < charactersLength) {
            entropy += characters.charAt(Math.floor(Math.random() * charactersLength));
            counter += 1;
        }
        let set_vk_result = yield exports.SECRETCLI[0].tx.compute.executeContract({
            sender: exports.WALLET.address,
            contract_address: exports.CONTRACT_ADDRESS,
            code_hash: process.env.CODE_HASH,
            msg: { set_viewing_key: { key: entropy } },
        }, {
            gasLimit: 50000,
        }).catch(e => (0, helpers_1.show_alert)("generate viewing key failed: ", e));
        if (set_vk_result.arrayLog) {
            const new_vk = set_vk_result.arrayLog[6].value;
            yield (0, update_dotenv_1.default)({
                VIEWING_KEY: new_vk
            });
            return ['', true];
        }
        return [set_vk_result, false];
    });
}
;
function set_username() {
    return __awaiter(this, void 0, void 0, function* () {
        // cost of username is the same as pool 1 ticket price
        const p_info_result = (yield (0, queries_1.pool_info)(process.env.CODE_HASH, 1));
        if (!p_info_result[1]) {
            return ['could not fetch cost data', false];
        }
        const cost = p_info_result[0].entry;
        const denom = p_info_result[0].denom;
        let cost_str = String(cost);
        let denom_str = String(denom);
        if (denom == 'uscrt') {
            denom_str = 'scrt';
            cost_str = String(Number(cost) / 1e6);
        }
        SETTINGS_MESSAGE.setContent(`reserving a username costs ${cost_str}${denom_str}, proceed? (y/N)`);
        exports.SCREEN.render();
        const should_proceed = yield (0, helpers_1.get_input)(SETTINGS);
        if (should_proceed != "y" && should_proceed != "Y") {
            return ['action cancelled', false];
        }
        SETTINGS_MESSAGE.setContent("{blue-fg}enter a username{/}");
        exports.SCREEN.render();
        const value = yield (0, helpers_1.get_input)(SETTINGS);
        SETTINGS_MESSAGE.setContent("setting username...");
        exports.SCREEN.render();
        let set_username_result = yield exports.SECRETCLI[0].tx.compute.executeContract({
            sender: exports.WALLET.address,
            contract_address: exports.CONTRACT_ADDRESS,
            code_hash: process.env.CODE_HASH,
            msg: { set_username: { username: value } },
            sent_funds: [{ amount: cost, denom: denom }]
        }, {
            gasLimit: 50000,
        }).catch(e => (0, helpers_1.show_alert)("set username failed: ", e));
        if (set_username_result && set_username_result.code == 0) {
            yield (0, update_dotenv_1.default)({
                USERNAME: value
            });
            let receipt_dir = "./receipts";
            if (!fs.existsSync(receipt_dir)) {
                fs.mkdirSync(receipt_dir);
            }
            let date_str = new Date().toLocaleString('en-GB');
            date_str = date_str.replace(/\//g, '-');
            date_str = date_str.replace(/ /g, '-');
            date_str = date_str.replace(/,/g, '-');
            date_str = date_str.replace(/:/g, '-');
            let file_path = receipt_dir + "/username-buy-" + date_str;
            let refund_data = JSON.stringify(set_username_result, null, 4);
            fs.writeFile(file_path, refund_data, function (err) {
                return __awaiter(this, void 0, void 0, function* () {
                    if (err) {
                        yield (0, helpers_1.exit)(1, "failed to save receipt: ", err);
                    }
                });
            });
            yield (0, helpers_1.show_alert)("receipt saved in file:\n" + file_path);
            return ['', true];
        }
        return [set_username_result, false];
    });
}
function toggle_symbolic() {
    return __awaiter(this, void 0, void 0, function* () {
        let new_val = 'true';
        if (process.env.SYMBOLIC_TERM == 'true') {
            new_val = 'false';
        }
        yield (0, update_dotenv_1.default)({
            SYMBOLIC_TERM: new_val
        });
        exports.SCREEN.render();
        return ['', true];
    });
}
const SETTINGS_MAP = {};
SETTINGS_MAP["0"] = generate_vk;
SETTINGS_MAP["1"] = set_username;
SETTINGS_MAP["2"] = toggle_symbolic;
function settings_menu() {
    return __awaiter(this, void 0, void 0, function* () {
        SETTINGS.hidden = !SETTINGS.hidden;
        if (!SETTINGS.hidden) {
            SETTINGS_TABLE.setData(yield settings_data());
            SETTINGS.setFront();
            exports.SCREEN.render();
            let ready_to_close = false;
            while (!ready_to_close) {
                let setting = yield (0, helpers_1.get_input)(SETTINGS);
                if (setting === 'q') {
                    break;
                }
                if (!(setting in SETTINGS_MAP)) {
                    SETTINGS_MESSAGE.setContent('not a valid setting index (enter \'q\' to quit settings)');
                    exports.SCREEN.render();
                    continue;
                }
                let func = SETTINGS_MAP[setting];
                SETTINGS_MESSAGE.setContent(`running '${SETTINGS_TABLE.rows[Number(setting) + 4][1]}'...`);
                exports.SCREEN.render();
                let result = yield func();
                if (!result[1]) {
                    if (result[0].rawLog) {
                        SETTINGS_MESSAGE.setContent(result[0].rawLog);
                    }
                    else {
                        SETTINGS_MESSAGE.setContent(`failed: ${result[0]}`);
                    }
                    exports.SCREEN.render();
                    continue;
                }
                SETTINGS_MESSAGE.setContent("{green-fg}done!{/} enter 'q' to quit settings.");
                SETTINGS_TABLE.setData(yield settings_data());
                exports.SCREEN.render();
            }
            SETTINGS.hidden = true;
            SETTINGS.setBack();
        }
        exports.BOX.focus();
        exports.SCREEN.render();
    });
}
exports.settings_menu = settings_menu;
exports.SCREEN.key(['+'], settings_menu);
