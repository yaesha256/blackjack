"use strict";
/******************************************************************************

BLACKJACK FRONTEND v0.0.0-alpha.rc.7
AUTOGENERATED INDEX.TS FILE

CREATED:        12 March 2023
AUTHOR:         YAESHA256
AFFILIATIONS:   AART
                                                                               
******************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const consts = __importStar(require("./constants"));
const query = __importStar(require("./queries"));
const tx = __importStar(require("./transactions"));
const h = __importStar(require("./helpers"));
const update_dotenv_1 = __importDefault(require("update-dotenv"));
const game_loop_1 = require("./game_loop");
const menu_1 = require("./menu");
const waiting_1 = require("./waiting");
/******************************************************************************
entry_point
******************************************************************************/
const entry_point = () => __awaiter(void 0, void 0, void 0, function* () {
    const CODE_HASH = (yield consts.SECRETCLI[0].query.compute.codeHashByCodeId({ code_id: String(consts.CODE_ID) })
        .catch((e) => __awaiter(void 0, void 0, void 0, function* () { yield h.exit(1, "failed to get code hash: ", e); }))).code_hash;
    yield (0, update_dotenv_1.default)({
        CODE_HASH: CODE_HASH
    });
    let alloc_result = yield query.allocation(CODE_HASH);
    let is_allocated = alloc_result[1];
    let pool_id = 255;
    let gameInfo_result = (yield query.game_info(CODE_HASH, alloc_result[0].instance_id));
    let in_queue = is_allocated && consts.INFO_IN_A_QUEUE.test(alloc_result[0].instance_id);
    let in_live = is_allocated && gameInfo_result[1];
    let in_completed = in_live && gameInfo_result[0].winner != 255;
    let in_pending = is_allocated && !in_queue && !in_live;
    let due_to_claim = in_live &&
        gameInfo_result[0].winner == alloc_result[0].index;
    if (!is_allocated || (in_completed && !due_to_claim)) {
        let ready = false;
        while (!ready) {
            consts.BOX.setContent("loading...");
            consts.SCREEN.render();
            let result = yield (0, menu_1.show_menu)(CODE_HASH);
            pool_id = result[0];
            let entry = result[1];
            let denom = result[2];
            consts.BOX.setContent("joining game...");
            consts.SCREEN.render();
            let join_tx = yield tx.send_tx(CODE_HASH, { join_game: {
                    pool_id,
                    lucky_phrase: consts.LUCKY_PHRASE,
                    as_human: consts.AS_HUMAN
                } }, [{ amount: String(entry), denom: denom }], 55000, 0, false);
            if (typeof join_tx === "string") {
                yield h.show_alert(join_tx);
                continue;
            }
            consts.BOX.content = '';
            (0, update_dotenv_1.default)({
                POOL_ID: String(pool_id)
            });
            ready = yield (0, waiting_1.wait_start)(CODE_HASH);
        }
        yield (0, game_loop_1.game_loop)(CODE_HASH, pool_id);
    }
    else {
        pool_id = alloc_result[0].pool_id;
    }
    if (in_pending || in_queue) {
        yield (0, waiting_1.wait_start)(CODE_HASH);
    }
    consts.SCREEN.render();
    yield (0, game_loop_1.game_loop)(CODE_HASH, pool_id);
});
const main_loop = () => __awaiter(void 0, void 0, void 0, function* () {
    while (true) {
        yield entry_point();
    }
});
main_loop();
